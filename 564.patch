From 209563b264a0d431f5bd5494ef96dc22e5265348 Mon Sep 17 00:00:00 2001
From: "James O. D. Hunt" <james.o.hunt@intel.com>
Date: Fri, 15 Sep 2017 17:15:01 +0100
Subject: [PATCH] config: Support a stateless system

Modify the runtime to look in multiple locations for its configuration.

Previously, with a CC system build, the build system would generate (and
the runtime would read) the file below:

    /etc/clear-containers/configuration.toml

This file was represented by the DESTCONFIG build variable.

However, now a CC system build will generate the following path instead:

    /usr/share/defaults/clear-containers/configuration.toml

But the runtime will look in both locations in the following order
(with build variables in brackets):

    /etc/clear-containers/configuration.toml (DESTSYSCONFIG)
    /usr/share/defaults/clear-containers/configuration.toml (DESTCONFIG)

(Note that the original configuration file now has a new build variable
name: DESTSYSCONFIG).

The first file the runtime finds will be used. Since previously the
configuration file below "/etc" was used and now the build will generate
the file below "/usr/share/defaults" instead, the advice is to delete
the "/etc/clear-containers" directory to ensure that the runtime uses
the latest pristine built configuration file by default.

Since the runtime requires a configuration file to run most commands,
but since the runtime is now looking in multiple locations for this
configuration, this change also introduces a new
"--cc-show-default-config-paths" global option. This option simply
displays the list of paths the runtime will consider as a configuration
source and then exits. This option does not require a configuration file
and may be useful to establish where the runtime is obtaining its
configuration from.

Fixes #551.

Signed-off-by: James O. D. Hunt <james.o.hunt@intel.com>
---
 Makefile                                    | 32 +++++++++----
 README.md                                   | 10 +++-
 config.go                                   | 48 +++++++++++++++----
 config_test.go                              | 67 ++++++++++++++++++++++++++
 docs/architecture/architecture.md           |  2 +-
 docs/developers-clear-containers-install.md |  2 +-
 installation/centos-setup.sh                |  2 +-
 main.go                                     | 14 ++++++
 main_test.go                                | 74 +++++++++++++++++++++++++++++
 utils.go                                    |  5 ++
 10 files changed, 233 insertions(+), 23 deletions(-)

diff --git a/Makefile b/Makefile
index 16eecd7d..28b19dbf 100644
--- a/Makefile
+++ b/Makefile
@@ -70,6 +70,7 @@ endif
 
 LIBEXECDIR := $(PREFIX)/libexec
 SHAREDIR := $(PREFIX)/share
+DEFAULTSDIR := $(SHAREDIR)/defaults
 
 PKGDATADIR := $(SHAREDIR)/$(CCDIR)
 PKGLIBDIR := $(LOCALSTATEDIR)/lib/$(CCDIR)
@@ -126,9 +127,16 @@ CONFIG_IN = $(CONFIG).in
 
 DESTTARGET := $(abspath $(DESTBINDIR)/$(TARGET))
 
-DESTCONFDIR := $(DESTDIR)/$(SYSCONFDIR)/$(CCDIR)
+DESTCONFDIR := $(DESTDIR)/$(DEFAULTSDIR)/$(CCDIR)
+DESTSYSCONFDIR := $(DESTDIR)/$(SYSCONFDIR)/$(CCDIR)
+
+# Main configuration file location for stateless systems
 DESTCONFIG := $(abspath $(DESTCONFDIR)/$(CONFIG_FILE))
 
+# Secondary configuration file location. Note that this takes precedence
+# over DESTCONFIG.
+DESTSYSCONFIG := $(abspath $(DESTSYSCONFDIR)/$(CONFIG_FILE))
+
 PAUSEDESTDIR := $(abspath $(DESTDIR)/$(PAUSEROOTPATH)/$(PAUSEBINRELPATH))
 
 # list of variables the user may wish to override
@@ -137,6 +145,7 @@ USER_VARS += BINDIR
 USER_VARS += CC_SYSTEM_BUILD
 USER_VARS += DESTCONFIG
 USER_VARS += DESTDIR
+USER_VARS += DESTSYSCONFIG
 USER_VARS += DESTTARGET
 USER_VARS += GLOBALLOGPATH
 USER_VARS += IMAGEPATH
@@ -213,7 +222,13 @@ const defaultVCPUCount uint32 = $(DEFVCPUS)
 const defaultMemSize uint32 = $(DEFMEMSZ) // MiB
 const defaultDisableBlockDeviceUse bool = $(DEFDISABLEBLOCK)
 
+// Default config file used by stateless systems.
 var defaultRuntimeConfiguration = "$(DESTCONFIG)"
+
+// Alternate config file that takes precedence over
+// defaultRuntimeConfiguration.
+var defaultSysConfRuntimeConfiguration = "$(DESTSYSCONFIG)"
+
 var defaultProxyPath = "$(PROXYPATH)"
 endef
 
@@ -337,14 +352,15 @@ show-footer:
 show-summary: show-header
 	@printf "â€¢ Summary:\n"
 	@printf "\n"
-	@printf "\tClear Containers system build     : $(cc_system_build)\n"
+	@printf "\tClear Containers system build         : $(cc_system_build)\n"
 	@printf "\n"
-	@printf "\tbinary install path (DESTTARGET)  : %s\n" $(DESTTARGET)
-	@printf "\tconfig install path (DESTCONFIG)  : %s\n" $(DESTCONFIG)
-	@printf "\thypervisor path (QEMUPATH)        : %s\n" $(QEMUPATH)
-	@printf "\tassets path (PKGDATADIR)          : %s\n" $(PKGDATADIR)
-	@printf "\tproxy+shim path (PKGLIBEXECDIR)   : %s\n" $(PKGLIBEXECDIR)
-	@printf "\tpause bundle path (PAUSEROOTPATH) : %s\n" $(PAUSEROOTPATH)
+	@printf "\tbinary install path (DESTTARGET)      : %s\n" $(DESTTARGET)
+	@printf "\tconfig install path (DESTCONFIG)      : %s\n" $(DESTCONFIG)
+	@printf "\talternate config path (DESTSYSCONFIG) : %s\n" $(DESTSYSCONFIG)
+	@printf "\thypervisor path (QEMUPATH)            : %s\n" $(QEMUPATH)
+	@printf "\tassets path (PKGDATADIR)              : %s\n" $(PKGDATADIR)
+	@printf "\tproxy+shim path (PKGLIBEXECDIR)       : %s\n" $(PKGLIBEXECDIR)
+	@printf "\tpause bundle path (PAUSEROOTPATH)     : %s\n" $(PAUSEROOTPATH)
 	@printf "\n"
 
 
diff --git a/README.md b/README.md
index 93f6c942..d4cf12c6 100644
--- a/README.md
+++ b/README.md
@@ -47,9 +47,15 @@ See [the contributing document](CONTRIBUTING.md).
 
 ## Configuration
 
-The runtime uses a single configuration file called `configuration.toml` which is normally located at `/etc/clear-containers/configuration.toml`.
+The runtime uses a single configuration file called `configuration.toml`. Since the runtime supports a [stateless system](https://clearlinux.org/features/stateless), it checks for this configuration file in multiple locations. The default location is `/usr/share/defaults/clear-containers/configuration.toml` for a standard system. However, if `/etc/clear-containers/configuration.toml` exists, this will take priority.
 
-To see details of your systems runtime environment (including the location of the configuration file), run:
+To see which paths the runtime will check for a configuration source, run:
+
+```bash
+$ cc-runtime --cc-show-default-config-paths
+```
+
+To see details of your systems runtime environment (including the location of the configuration file being used), run:
 
 ```bash
 $ cc-runtime cc-env
diff --git a/config.go b/config.go
index 99e0c786..73afa854 100644
--- a/config.go
+++ b/config.go
@@ -18,7 +18,6 @@ import (
 	"errors"
 	"fmt"
 	"io/ioutil"
-	"os"
 	"path/filepath"
 	goruntime "runtime"
 	"strings"
@@ -331,19 +330,16 @@ func loadConfiguration(configPath string, ignoreLogging bool) (resolvedConfigPat
 		ShimType:         defaultShim,
 	}
 
+	var resolved string
+
 	if configPath == "" {
-		configPath = defaultRuntimeConfiguration
+		resolved, err = getDefaultConfigFile()
+	} else {
+		resolved, err = resolvePath(configPath)
 	}
 
-	resolved, err := resolvePath(configPath)
 	if err != nil {
-		if os.IsNotExist(err) {
-			// Make the error clearer than the one returned
-			// by EvalSymlinks().
-			return "", "", config, fmt.Errorf("Config file %v does not exist", configPath)
-		}
-
-		return "", "", config, err
+		return "", "", config, fmt.Errorf("Cannot find usable config file (%v)", err)
 	}
 
 	configData, err := ioutil.ReadFile(resolved)
@@ -376,3 +372,35 @@ func loadConfiguration(configPath string, ignoreLogging bool) (resolvedConfigPat
 
 	return resolved, logfilePath, config, nil
 }
+
+// getDefaultConfigFilePaths returns a list of paths that will be
+// considered as configuration files in priority order.
+func getDefaultConfigFilePaths() []string {
+	return []string{
+		// normally below "/etc"
+		defaultSysConfRuntimeConfiguration,
+
+		// normally below "/usr/share"
+		defaultRuntimeConfiguration,
+	}
+}
+
+// getDefaultConfigFile looks in multiple default locations for a
+// configuration file and returns the resolved path for the first file
+// found, or an error if no config files can be found.
+func getDefaultConfigFile() (string, error) {
+	var errs []string
+
+	for _, file := range getDefaultConfigFilePaths() {
+		resolved, err := resolvePath(file)
+		if err != nil {
+			s := fmt.Sprintf("config file %q unresolvable: %v", file, err)
+			errs = append(errs, s)
+			continue
+		}
+
+		return resolved, nil
+	}
+
+	return "", errors.New(strings.Join(errs, ", "))
+}
diff --git a/config_test.go b/config_test.go
index db7bd9f7..0c1b0264 100644
--- a/config_test.go
+++ b/config_test.go
@@ -211,6 +211,7 @@ func testLoadConfiguration(t *testing.T, dir string,
 
 			// override
 			defaultRuntimeConfiguration = testConfig.ConfigPath
+			defaultSysConfRuntimeConfiguration = ""
 
 			for _, file := range configFiles {
 				var err error
@@ -871,3 +872,69 @@ func TestAgentDefaults(t *testing.T) {
 	a.PauseRootPath = path
 	assert.Equal(t, a.pauseRootPath(), path, "custom agent pause root path wrong")
 }
+
+func TestGetDefaultConfigFilePaths(t *testing.T) {
+	assert := assert.New(t)
+
+	results := getDefaultConfigFilePaths()
+	// There should be atleast two config file locations
+	assert.True(len(results) >= 2)
+
+	for _, f := range results {
+		// Paths cannot be empty
+		assert.NotNil(f)
+	}
+}
+
+func TestGetDefaultConfigFile(t *testing.T) {
+	assert := assert.New(t)
+
+	tmpdir, err := ioutil.TempDir(testDir, "")
+	assert.NoError(err)
+	defer os.RemoveAll(tmpdir)
+
+	hypervisor := "qemu"
+	confDir := filepath.Join(tmpdir, "conf")
+	sysConfDir := filepath.Join(tmpdir, "sysconf")
+
+	for _, dir := range []string{confDir, sysConfDir} {
+		err = os.MkdirAll(dir, testDirMode)
+		assert.NoError(err)
+	}
+
+	confDirConfig, err := createAllRuntimeConfigFiles(confDir, hypervisor)
+	assert.NoError(err)
+
+	sysConfDirConfig, err := createAllRuntimeConfigFiles(sysConfDir, hypervisor)
+	assert.NoError(err)
+
+	savedConf := defaultRuntimeConfiguration
+	savedSysConf := defaultSysConfRuntimeConfiguration
+
+	defaultRuntimeConfiguration = confDirConfig.ConfigPath
+	defaultSysConfRuntimeConfiguration = sysConfDirConfig.ConfigPath
+
+	defer func() {
+		defaultRuntimeConfiguration = savedConf
+		defaultSysConfRuntimeConfiguration = savedSysConf
+
+	}()
+
+	got, err := getDefaultConfigFile()
+	assert.NoError(err)
+	// defaultSysConfRuntimeConfiguration has priority over defaultRuntimeConfiguration
+	assert.Equal(got, defaultSysConfRuntimeConfiguration)
+
+	// force defaultRuntimeConfiguration to be returned
+	os.Remove(defaultSysConfRuntimeConfiguration)
+
+	got, err = getDefaultConfigFile()
+	assert.NoError(err)
+	assert.Equal(got, defaultRuntimeConfiguration)
+
+	// force error
+	os.Remove(defaultRuntimeConfiguration)
+
+	_, err = getDefaultConfigFile()
+	assert.Error(err)
+}
diff --git a/docs/architecture/architecture.md b/docs/architecture/architecture.md
index c0f8c25a..1ff8b301 100644
--- a/docs/architecture/architecture.md
+++ b/docs/architecture/architecture.md
@@ -195,7 +195,7 @@ library.
 ### Configuration
 
 The runtime uses a TOML format configuration file called `configuration.toml`. By
-default this file is installed in the `/etc/clear-containers` directory.
+default this file is installed in the `/usr/share/defaults/clear-containers` directory.
 Most users will not need to modify the configuration file.
 
 The file is well commented and provides a few "knobs" that can be used to modify
diff --git a/docs/developers-clear-containers-install.md b/docs/developers-clear-containers-install.md
index f0e1cbb8..8b6790f4 100644
--- a/docs/developers-clear-containers-install.md
+++ b/docs/developers-clear-containers-install.md
@@ -123,7 +123,7 @@ See [the upgrading document](upgrading.md) for further details.
    $ # (note that this is only an example using default paths).
    $ sudo sed -i.bak -e 's!^\(image = ".*"\)!# \1 \
    image = "/usr/share/clear-containers/container.img"!g' \
-   /etc/clear-containers/configuration.toml
+   /usr/share/defaults/clear-containers/configuration.toml
    
 For more details on the runtime's build system, run:
 
diff --git a/installation/centos-setup.sh b/installation/centos-setup.sh
index 0f137b20..ff45e142 100755
--- a/installation/centos-setup.sh
+++ b/installation/centos-setup.sh
@@ -128,7 +128,7 @@ sudo yum -y install cc-runtime cc-proxy cc-shim linux-container clear-containers
 # rather than the OBS default values.
 sudo -E prefix_dir="${prefix_dir}" sed -i -e \
     "s,^path = \"/usr/bin/qemu-system-x86_64\",path = \"${prefix_dir}/bin/qemu-system-x86_64\",g" \
-    /etc/clear-containers/configuration.toml
+    /usr/share/defaults/clear-containers/configuration.toml
 
 # Configure CC by default
 service_dir="/etc/systemd/system/docker.service.d"
diff --git a/main.go b/main.go
index a90989c9..5f7e5f7f 100644
--- a/main.go
+++ b/main.go
@@ -91,6 +91,10 @@ var runtimeFlags = []cli.Flag{
 		Value: defaultRootDirectory,
 		Usage: "root directory for storage of container state (this should be located in tmpfs)",
 	},
+	cli.BoolFlag{
+		Name:  "cc-show-default-config-paths",
+		Usage: "show config file paths that will be checked for (in order)",
+	},
 }
 
 // runtimeCommands is the list of supported command-line (sub-)
@@ -132,6 +136,16 @@ var savedCLIErrWriter = cli.ErrWriter
 // beforeSubcommands is the function to perform preliminary checks
 // before command-line parsing occurs.
 func beforeSubcommands(context *cli.Context) error {
+	if context.GlobalBool("cc-show-default-config-paths") {
+		files := getDefaultConfigFilePaths()
+
+		for _, file := range files {
+			fmt.Fprintf(defaultOutputFile, "%s\n", file)
+		}
+
+		exit(0)
+	}
+
 	if userWantsUsage(context) || (context.NArg() == 1 && (context.Args()[0] == "cc-check")) {
 		// No setup required if the user just
 		// wants to see the usage statement or are
diff --git a/main_test.go b/main_test.go
index 833fcc92..94009e6a 100644
--- a/main_test.go
+++ b/main_test.go
@@ -80,6 +80,14 @@ func init() {
 		panic("ERROR: invalid build: commit not set")
 	}
 
+	if defaultSysConfRuntimeConfiguration == "" {
+		panic("ERROR: invalid build: defaultSysConfRuntimeConfiguration not set")
+	}
+
+	if defaultRuntimeConfiguration == "" {
+		panic("ERROR: invalid build: defaultRuntimeConfiguration not set")
+	}
+
 	fmt.Printf("INFO: switching to fake virtcontainers implementation for testing\n")
 	vci = testingImpl
 
@@ -749,6 +757,72 @@ func TestMainBeforeSubCommandsLoadConfigurationFail(t *testing.T) {
 	}
 }
 
+func TestMainBeforeSubCommandsShowCCConfigPaths(t *testing.T) {
+	assert := assert.New(t)
+
+	tmpdir, err := ioutil.TempDir(testDir, "")
+	assert.NoError(err)
+	defer os.RemoveAll(tmpdir)
+
+	app := cli.NewApp()
+
+	set := flag.NewFlagSet("", 0)
+	set.Bool("cc-show-default-config-paths", true, "")
+
+	ctx := cli.NewContext(app, set, nil)
+
+	savedExitFunc := exitFunc
+
+	exitStatus := 99
+	exitFunc = func(status int) { exitStatus = status }
+
+	defer func() {
+		exitFunc = savedExitFunc
+	}()
+
+	savedOutputFile := defaultOutputFile
+
+	defer func() {
+		resetCLIGlobals()
+		defaultOutputFile = savedOutputFile
+	}()
+
+	output := filepath.Join(tmpdir, "output")
+	f, err := os.OpenFile(output, os.O_CREATE|os.O_WRONLY|os.O_SYNC, testFileMode)
+	assert.NoError(err)
+	defer f.Close()
+
+	defaultOutputFile = f
+
+	setCLIGlobals()
+
+	_ = beforeSubcommands(ctx)
+	assert.Equal(exitStatus, 0)
+
+	text, err := getFileContents(output)
+	assert.NoError(err)
+
+	lines := strings.Split(text, "\n")
+
+	// Remove last line if empty
+	length := len(lines)
+	last := lines[length-1]
+	if last == "" {
+		lines = lines[:length-1]
+	}
+
+	assert.Equal(len(lines), 2)
+
+	for i, line := range lines {
+		switch i {
+		case 0:
+			assert.Equal(line, defaultSysConfRuntimeConfiguration)
+		case 1:
+			assert.Equal(line, defaultRuntimeConfiguration)
+		}
+	}
+}
+
 func TestMainFatal(t *testing.T) {
 	assert := assert.New(t)
 
diff --git a/utils.go b/utils.go
index 5b77593a..6ac46d37 100644
--- a/utils.go
+++ b/utils.go
@@ -150,6 +150,11 @@ func resolvePath(path string) (string, error) {
 
 	resolved, err := filepath.EvalSymlinks(absolute)
 	if err != nil {
+		if os.IsNotExist(err) {
+			// Make the error clearer than the default
+			return "", fmt.Errorf("file %v does not exist", absolute)
+		}
+
 		return "", err
 	}
 
